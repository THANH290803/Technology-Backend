package com.store.technology.Service;

import com.store.technology.DTO.CategoryRequest;
import com.store.technology.Entity.Brand;
import com.store.technology.Entity.Category;
import com.store.technology.Repository.BrandRepository;
import com.store.technology.Repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class CategoryService {
    @Autowired
    private CategoryRepository categoryRepository;

    // üîπ L·∫•y t·∫•t c·∫£ ch∆∞a b·ªã x√≥a
    public List<Category> getAllActive() {
        return categoryRepository.findAllActive();
    }

    // üîπ L·∫•y t·∫•t c·∫£ k·ªÉ c·∫£ ƒë√£ x√≥a
    public List<Category> getAllWithDeleted() {
        return categoryRepository.findAllIncludingDeleted();
    }

    // üîπ L·∫•y theo id ch∆∞a b·ªã x√≥a
    public Optional<Category> getActiveById(Long id) {
        return categoryRepository.findActiveById(id);
    }

    // üîπ L·∫•y theo id k·ªÉ c·∫£ ƒë√£ x√≥a
    public Optional<Category> getByIdIncludingDeleted(Long id) {
        return categoryRepository.findByIdIncludingDeleted(id);
    }

    // üîπ T·∫°o m·ªõi ho·∫∑c kh√¥i ph·ª•c n·∫øu ƒë√£ b·ªã xo√° m·ªÅm
    public Category createCategory(CategoryRequest request) {
        // T√¨m xem c√≥ category c√πng t√™n ch∆∞a (k·ªÉ c·∫£ ƒë√£ xo√°)
        Optional<Category> existingCategoryOpt = categoryRepository.findByNameIncludingDeleted(request.getName());

        if (existingCategoryOpt.isPresent()) {
            Category existingCategory = existingCategoryOpt.get();

            // N·∫øu b·ªã xo√° m·ªÅm ‚Üí kh√¥i ph·ª•c l·∫°i
            if (existingCategory.getDeletedAt() != null) {
                existingCategory.setDeletedAt(null);
                existingCategory.setDescription(request.getDescription());
                return categoryRepository.save(existingCategory);
            }

            // N·∫øu ch∆∞a b·ªã xo√° ‚Üí v·∫´n t·∫°o m·ªõi, cho ph√©p tr√πng t√™n
            // (ho·∫∑c b·∫°n c√≥ th·ªÉ ch·ªçn throw l·ªói n·∫øu mu·ªën kh√¥ng tr√πng)
        }

        // N·∫øu ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi
        Category category = new Category();
        category.setName(request.getName());
        category.setDescription(request.getDescription());
        category.setDeletedAt(null);
        return categoryRepository.save(category);
    }

    // üîπ C·∫≠p nh·∫≠t (bao g·ªìm c·∫£ danh m·ª•c ƒë√£ xo√° m·ªÅm)
    public Category updateCategory(Long id, CategoryRequest request) {
        // T√¨m category k·ªÉ c·∫£ ƒë√£ xo√°
        Category category = categoryRepository.findByIdIncludingDeleted(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y category v·ªõi id: " + id));

        // ‚úÖ Cho ph√©p ƒë·ªïi t√™n, k·ªÉ c·∫£ tr√πng v·ªõi category ƒë√£ b·ªã xo√° m·ªÅm kh√°c
        if (request.getName() != null) {
            // Ki·ªÉm tra tr√πng t√™n v·ªõi category ƒëang ho·∫°t ƒë·ªông (deleted_at IS NULL)
            Optional<Category> existingActiveCategory = categoryRepository.findByNameActive(request.getName());
            if (existingActiveCategory.isPresent() && !existingActiveCategory.get().getId().equals(id)) {
                throw new IllegalArgumentException("T√™n danh m·ª•c n√†y ƒë√£ t·ªìn t·∫°i!");
            }
            category.setName(request.getName());
        }

        if (request.getDescription() != null) {
            category.setDescription(request.getDescription());
        }

        return categoryRepository.save(category);
    }

    // üîπ Soft delete (set deleted_at = now)
    public String softDelete(Long id) {
        Optional<Category> existing = categoryRepository.findActiveById(id);
        if (existing.isPresent()) {
            Category category = existing.get();
            category.setDeletedAt(LocalDateTime.now());
            categoryRepository.save(category);
            return "ƒê√£ x√≥a m·ªÅm category c√≥ id = " + id;
        }
        return "Kh√¥ng th·ªÉ x√≥a: category kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥";
    }

    // üîπ Restore (set deleted_at = NULL)
    public String restore(Long id) {
        Optional<Category> existing = categoryRepository.findByIdIncludingDeleted(id);
        if (existing.isPresent()) {
            Category category = existing.get();
            if (category.getDeletedAt() == null) {
                return "Category n√†y ch∆∞a b·ªã x√≥a, kh√¥ng c·∫ßn kh√¥i ph·ª•c";
            }
            category.setDeletedAt(null);
            categoryRepository.save(category);
            return "ƒê√£ kh√¥i ph·ª•c category c√≥ id = " + id;
        }
        return "Kh√¥ng th·ªÉ kh√¥i ph·ª•c: category kh√¥ng t·ªìn t·∫°i";
    }
}
