package com.store.technology.Controller;

import com.store.technology.DTO.SpecificationRequest;
import com.store.technology.Entity.Specification;
import com.store.technology.Repository.ConfigurationRepository;
import com.store.technology.Service.SpecificationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Tag(name = "Specifications", description = "CRUD API cho Specifications (Soft Delete + Restore)")
@RestController
@RequestMapping("/api/specifications")
public class SpecificationController {
    private final SpecificationService specificationService;

    public SpecificationController(SpecificationService specificationService) {
        this.specificationService = specificationService;
    }

    // üîπ L·∫•y t·∫•t c·∫£ ch∆∞a xo√°
    @GetMapping
    @Operation(summary = "L·∫•y danh s√°ch Specification", description = "Ch·ªâ l·∫•y c√°c Specification ch∆∞a b·ªã xo√° m·ªÅm")
    public ResponseEntity<List<Specification>> getAllNotDeleted() {
        return ResponseEntity.ok(specificationService.getAllNotDeleted());
    }

    // üîπ L·∫•y t·∫•t c·∫£ bao g·ªìm c·∫£ xo√° m·ªÅm
    @GetMapping("/all")
    @Operation(summary = "L·∫•y t·∫•t c·∫£ Specification", description = "Bao g·ªìm c·∫£ c√°c Specification ƒë√£ b·ªã xo√° m·ªÅm")
    public ResponseEntity<List<Specification>> getAllIncludingDeleted() {
        return ResponseEntity.ok(specificationService.getAllIncludingDeleted());
    }

    // üîπ L·∫•y 1 b·∫£n ghi
    @GetMapping("/{id}")
    @Operation(summary = "L·∫•y Specification theo ID", description = "C√≥ th·ªÉ bao g·ªìm c·∫£ b·∫£n ghi ƒë√£ b·ªã xo√° m·ªÅm n·∫øu includeDeleted=true")
    public ResponseEntity<Specification> getById(@PathVariable Long id,
                                                 @RequestParam(defaultValue = "false") boolean includeDeleted) {
        return ResponseEntity.ok(specificationService.getById(id, includeDeleted));
    }

    // üîπ Th√™m m·ªõi
    @PostMapping
    @Operation(summary = "Th√™m m·ªõi Specification", description = "T·∫°o Specification m·ªõi, y√™u c·∫ßu truy·ªÅn name v√† configurationId")
    public ResponseEntity<?> create(@RequestBody SpecificationRequest request) {
        try {
            Specification newSpec = specificationService.createFromJson(request.getName(), request.getValue(), request.getConfigurationId());
            Map<String, Object> res = new HashMap<>();
            res.put("message", "T·∫°o Specification th√†nh c√¥ng!");
            res.put("data", newSpec);
            return ResponseEntity.ok(res);
        } catch (Exception e) {
            return buildError(e);
        }
    }

    // üîπ C·∫≠p nh·∫≠t
    @PatchMapping("/{id}")
    @Operation(summary = "C·∫≠p nh·∫≠t Specification", description = "C·∫≠p nh·∫≠t name v√† configurationId theo ID")
    public ResponseEntity<?> update(@PathVariable(required = false) Long id, @RequestBody SpecificationRequest request) {
        try {
            if (id == null) {
                return ResponseEntity.badRequest().body(Map.of(
                        "message", "Thi·∫øu ID trong URL (v√≠ d·ª•: /api/specifications/1)"
                ));
            }

            Specification updated = specificationService.updateFromJson(id, request.getName(), request.getValue(), request.getConfigurationId());
            return ResponseEntity.ok(Map.of(
                    "message", "C·∫≠p nh·∫≠t Specification th√†nh c√¥ng!",
                    "data", updated
            ));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of(
                    "error", e.getClass().getSimpleName(),
                    "message", e.getMessage()
            ));
        }
    }

    @GetMapping("/configuration/{configurationId}")
    @Operation(summary = "L·∫•y Specification theo Configuration Id", description = "L·∫•y Specification theo Configuration Id")
    public ResponseEntity<List<Specification>> getByConfiguration(@PathVariable Long configurationId,
                                                                  @RequestParam(defaultValue = "false") boolean includeDeleted) {
        List<Specification> specs = specificationService.getByConfigurationId(configurationId, includeDeleted);
        return ResponseEntity.ok(specs);
    }


    // üîπ Xo√° m·ªÅm
    @PatchMapping("/{id}/delete")
    @Operation(summary = "Xo√° m·ªÅm Specification", description = "ƒê√°nh d·∫•u Specification l√† ƒë√£ xo√° (soft delete)")
    public ResponseEntity<Void> softDelete(@PathVariable Long id) {
        specificationService.softDelete(id);
        return ResponseEntity.ok().build();
    }

    // üîπ Kh√¥i ph·ª•c
    @PatchMapping("/{id}/restore")
    @Operation(summary = "Kh√¥i ph·ª•c Specification", description = "Kh√¥i ph·ª•c Specification ƒë√£ b·ªã xo√° m·ªÅm")
    public ResponseEntity<Void> restore(@PathVariable Long id) {
        specificationService.restore(id);
        return ResponseEntity.ok().build();
    }

    // ‚öôÔ∏è H√†m x·ª≠ l√Ω l·ªói d√πng chung
    private ResponseEntity<Map<String, Object>> buildError(Exception e) {
        Map<String, Object> error = new HashMap<>();
        error.put("error", e.getClass().getSimpleName());
        error.put("message", e.getMessage());
        return ResponseEntity.badRequest().body(error);
    }
}
