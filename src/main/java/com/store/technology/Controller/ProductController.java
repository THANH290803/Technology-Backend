package com.store.technology.Controller;

import com.store.technology.DTO.ProductRequest;
import com.store.technology.Entity.Product;
import com.store.technology.Service.ProductService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;

@Tag(name = "Product", description = "CRUD API cho Product (Soft Delete + Restore)")
@RestController
@RequestMapping("/api/products")
@CrossOrigin("*")
public class ProductController {
    @Autowired
    private ProductService productService;

    // Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m (k·ªÉ c·∫£ ƒë√£ x√≥a)
    @GetMapping("/all")
    @Operation(summary = "L·∫•y t·∫•t c·∫£ Product", description = "L·∫•y danh s√°ch t·∫•t c·∫£ Product bao g·ªìm c·∫£ c√°c b·∫£n ghi ƒë√£ b·ªã xo√° m·ªÅm")
    public List<Product> getAll() {
        return productService.getAllProducts();
    }

    // Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m ch∆∞a b·ªã x√≥a
    @GetMapping
    @Operation(summary = "L·∫•y Product ƒëang ho·∫°t ƒë·ªông", description = "Ch·ªâ l·∫•y c√°c Product ch∆∞a b·ªã xo√° m·ªÅm")
    public List<Product> getActiveProducts() {
        return productService.getActiveProducts();
    }

    // L·∫•y 1 s·∫£n ph·∫©m (k·ªÉ c·∫£ b·ªã x√≥a)
    @GetMapping("/any/{id}")
    @Operation(summary = "L·∫•y Product theo ID", description = "L·∫•y m·ªôt Product theo ID, bao g·ªìm c·∫£ b·∫£n ghi ƒë√£ b·ªã xo√° m·ªÅm")
    public Product getById(@PathVariable Long id) {
        return productService.getProductById(id);
    }

    // L·∫•y 1 s·∫£n ph·∫©m ch∆∞a b·ªã x√≥a
    @GetMapping("/{id}")
    @Operation(summary = "L·∫•y Product theo ID (ch∆∞a xo√° m·ªÅm)", description = "L·∫•y m·ªôt Product theo ID ch·ªâ khi ch∆∞a b·ªã xo√° m·ªÅm")
    public Product getActiveById(@PathVariable Long id) {
        return productService.getActiveProductById(id);
    }

    // ‚úÖ T·∫°o s·∫£n ph·∫©m m·ªõi
    @PostMapping
    @Operation(summary = "Th√™m m·ªõi Product", description = "T·∫°o Product m·ªõi t·ª´ name, totalQuality, brandId, categoryId")
    public ResponseEntity<?> create(@RequestBody ProductRequest request) {
        try {
            Product product = productService.createProduct(request);
            return ResponseEntity.ok(Map.of(
                    "message", "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!",
                    "data", product
            ));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of(
                    "error", e.getClass().getSimpleName(),
                    "message", e.getMessage()
            ));
        }
    }

    // ‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    @PatchMapping("/{id}")
    @Operation(summary = "C·∫≠p nh·∫≠t Product", description = "C·∫≠p nh·∫≠t th√¥ng tin Product theo ID")
    public ResponseEntity<?> update(@PathVariable Long id, @RequestBody ProductRequest request) {
        try {
            Product updated = productService.updateProduct(id, request);
            return ResponseEntity.ok(Map.of(
                    "message", "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!",
                    "data", updated
            ));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of(
                    "error", e.getClass().getSimpleName(),
                    "message", e.getMessage()
            ));
        }
    }

    @PostMapping("/create-product-productDetails")
    @Operation(
            summary = "Th√™m m·ªõi s·∫£n ph·∫©m",
            description = """
        T·∫°o m·ªõi m·ªôt s·∫£n ph·∫©m c√πng danh s√°ch chi ti·∫øt c·∫•u h√¨nh (ProductDetails).
        - T·ª± ƒë·ªông sinh `productCode`.
        - Nh·∫≠n v√†o danh s√°ch c·∫•u h√¨nh g·ªìm `configurationId`, `quantity`, `price`.
        """
    )
    public ResponseEntity<?> createProduct(@RequestBody ProductRequest request) {
        Product product = productService.createProductWithDetails(request);
        return ResponseEntity.ok(product);
    }

    @PatchMapping("/updateProductWithProductDetail/{id}")
    // üü° C·∫≠p nh·∫≠t s·∫£n ph·∫©m (PATCH)
    @Operation(summary = "C·∫≠p nh·∫≠t s·∫£n ph·∫©m", description = "C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m v√† chi ti·∫øt s·∫£n ph·∫©m theo ID.")
    public ResponseEntity<Product> updateProductWithProductDetail(@PathVariable Long id, @RequestBody ProductRequest request) {
        Product updated = productService.updateProductWithProductDetail(id, request);
        return ResponseEntity.ok(updated);
    }

    // X√≥a m·ªÅm
    @DeleteMapping("/{id}")
    @Operation(summary = "Xo√° m·ªÅm Product", description = "ƒê√°nh d·∫•u Product l√† ƒë√£ xo√° (soft delete)")
    public String softDelete(@PathVariable Long id) {
        return productService.softDeleteProduct(id) ? "Deleted successfully" : "Product not found";
    }

    // Kh√¥i ph·ª•c s·∫£n ph·∫©m
    @PatchMapping("/restore/{id}")
    @Operation(summary = "Kh√¥i ph·ª•c Product", description = "Kh√¥i ph·ª•c Product ƒë√£ b·ªã xo√° m·ªÅm")
    public String restore(@PathVariable Long id) {
        return productService.restoreProduct(id) ? "Restored successfully" : "Product not found";
    }

    @PostMapping("/import")
    public ResponseEntity<String> importProducts(@RequestParam("file") MultipartFile file) {
        try {
            String filename = file.getOriginalFilename().toLowerCase();
            if (filename.endsWith(".csv")) {
                productService.importFromCSV(file);
            } else if (filename.endsWith(".xls") || filename.endsWith(".xlsx")) {
                productService.importFromExcel(file);
            } else {
                return ResponseEntity.badRequest().body("File kh√¥ng h·ª£p l·ªá (ch·ªâ CSV ho·∫∑c Excel)");
            }
            return ResponseEntity.ok("Import th√†nh c√¥ng!");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("L·ªói import: " + e.getMessage());
        }
    }
}
